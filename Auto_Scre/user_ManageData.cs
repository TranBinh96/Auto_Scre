using Auto_Scre.Data.EF.Context;
using DevExpress.XtraCharts;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Auto_Scre
{
    public partial class user_ManageData : DevExpress.XtraEditors.XtraUserControl
    {

        static AppDbContext sql = new AppDbContext();
        static SqlConnection connection = sql.Connectiondb();
        public user_ManageData()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard

            try
            {
                this.studentTableAdapter.FillBy(this.testDataSet.student);
            }
            catch (System.Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.Message);
            }
            // This line of code is generated by Data Source Configuration Wizard
            studentTableAdapter1.Fill(testDataSet1.student);
        }




        private void fillByToolStripButton_Click(object sender, EventArgs e)
        {
            try
            {
                this.studentTableAdapter.FillBy(this.testDataSet.student);
            }
            catch (System.Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.Message);
            }

        }


        private void user_ManageData_Load(object sender, EventArgs e)
        {
            string connectionString = "Data Source=DESKTOP-CVOUMT1;Initial Catalog=Test;Integrated Security=True";
            getDataChart();
            SqlClientPermission sqlClientPermission = new SqlClientPermission(System.Security.Permissions.PermissionState.Unrestricted);
            sqlClientPermission.Demand();
            LoadData();
        }

        private void getDataChart()
        {
            // Create a Chart Control object and add it to the form.
            ChartControl chart = new ChartControl();
            chart.Dock = DockStyle.Fill;
            this.Controls.Add(chart);
            chart.DataSource = testDataSet.student;

            // Create a line series, bind it to data and add to the chart.
            Series series = new Series("student", ViewType.Line);
            series.ArgumentDataMember = "total";
            series.ValueDataMembers.AddRange("total");
            chart.Series.Add(series);

            //// Enable series markers.
            //LineSeriesView view = (LineSeriesView)series.View;
            //view.MarkerVisibility = DevExpress.Utils.DefaultBoolean.True;

            //// Display series labels and customize their text format.
            //series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.True;
            //series.Label.ResolveOverlappingMode = ResolveOverlappingMode.HideOverlapped;
            //series.Label.TextPattern = "{V:.#}";

            //// Create a chart title.
            //ChartTitle chartTitle = new ChartTitle();
            //chartTitle.Text = "Temperature (°F)";
            //chart.Titles.Add(chartTitle);

            //// Customize axes.
            //XYDiagram diagram = chart.Diagram as XYDiagram;
            //diagram.AxisX.Label.TextPattern = "{A:MMM, d (HH:mm)}";
            //diagram.AxisX.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Hour;
            //diagram.AxisX.DateTimeScaleOptions.GridSpacing = 9;
            //diagram.AxisX.WholeRange.SideMarginsValue = 0.5;
            //diagram.AxisY.WholeRange.AlwaysShowZeroLevel = false;

            //// Hide a legend if necessary.
            //chart.Legend.Visibility = DevExpress.Utils.DefaultBoolean.False;
        }


        void LoadData()
        {
            this.studentTableAdapter.FillBy(this.testDataSet.student);
        }

        delegate void UpdateData();
        public void OnDependencyChange(object sender, SqlNotificationEventArgs e)
        {
            SqlDependency sqlDependency = sender as SqlDependency;
            sqlDependency.OnChange -= OnDependencyChange;
            UpdateData updateData = new UpdateData(LoadData);
            this.Invoke(updateData, null);
        }




    }

}
